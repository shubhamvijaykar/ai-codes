import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score




df = pd.read_csv("/Users/sajalpriya/Downloads/ml dataset/uber.csv")
df


df.shape
df.head
df.columns
data = df.drop(['Unnamed: 0','key'],axis = 1)
data.head()
data.pickup_datetime = pd.to_datetime(data.pickup_datetime , errors='coerce')


df1 = data.assign(hour = data.pickup_datetime.dt.hour,
                 day = data.pickup_datetime.dt.day,
                 month = data.pickup_datetime.dt.month,
                 year = data.pickup_datetime.dt.year,
                 dayofweek = data.pickup_datetime.dt.dayofweek)
df1 = df1.drop('pickup_datetime', axis = 1)
df1


df.isnull().sum()




df1['dropoff_longitude'].fillna(value = df1['dropoff_longitude'].mean(),inplace=True)


df1['dropoff_latitude'].fillna(value = df1['dropoff_latitude'].median(),inplace=True)


df1.isnull().sum()


df1.plot(kind='box',subplots=True,layout=(7,2),figsize=(15,20))


def remove_out(df2,col):
    Q1 = df2[col].quantile(0.25)
    Q3 = df2[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5*IQR
    upper = Q3 + 1.5*IQR
    df1[col] = np.clip(df2[col],lower,upper)
    return df2


def treat_out(df2,col_list):
    for c in col_list:
        df2 = remove_out(df1,c)
    return df2


df1 = treat_out(df1,df1.iloc[: , 0::])


df1.plot(kind='box',subplots=True,layout=(7,2),figsize=(15,20))


incorrect_coordinates = df1.loc[(df1.pickup_latitude>90) | (df1.pickup_latitude<-90) |
                                (df1.dropoff_latitude>90) | (df1.dropoff_latitude<-90) |
                                (df1.pickup_longitude>180) | (df1.pickup_longitude<-180) |
                                (df1.dropoff_longitude>90) | (df1.dropoff_longitude<-90) 
                               ]
df1.drop(incorrect_coordinates,inplace=True,errors='ignore')
df1.shape


sns.heatmap(df1.corr(),annot=False)


plt.figure(figsize = (9,8))
sns.heatmap(df1.corr(),annot=True,cmap='BuPu')


x = df1.drop('fare_amount', axis=1)
y = df1['fare_amount']


x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)


lr_model = LinearRegression()
lr_model.fit(x_train, y_train)


lr_pred = lr_model.predict(x_test)
lr_pred


lr_rmse = np.sqrt(mean_squared_error(y_test, lr_pred))
lr_r2 = r2_score(y_test, lr_pred)


print(f"Linear Regression: RMSE = {lr_rmse}, R2 = {lr_r2}")


rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(x_train, y_train)


rf_pred = rf_model.predict(x_test)
rf_pred


print(f"Random Forest: RMSE = {rf_rmse}, R2 = {rf_r2}")