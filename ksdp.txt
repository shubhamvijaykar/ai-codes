# A Dynamic Programming based Python
# Program for 0-1 Knapsack problem
# Returns the maximum profit that can
# be put in a knapsack of capacity W
# Time Complexity: O(N * W). where ‘N’ is the number of elements and ‘W’ is capacity.
# Auxiliary Space: O(N * W). The use of a 2-D array of size ‘N*W’.

def knapSack(BagLimit, wt, profit, n):

    K = [[0 for x in range(BagLimit + 1)] for x in range(n + 1)]

    # Build table K[][] in bottom up manner
    for i in range(n + 1):
        for w in range(BagLimit + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i-1] <= w:
                K[i][w] = max(profit[i-1] + K[i-1][w-wt[i-1]], K[i-1][w])
            else:
                # same as previous
                K[i][w] = K[i-1][w]

    return K[n][BagLimit]


# Driver code
if __name__ == '__main__':
    profit = [60, 100, 120]
    weight = [10, 20, 30]
    BagLimit = 50
    n = len(profit)
    print(knapSack(BagLimit, weight, profit, n))





************

Sure, here is a brief explanation of the provided Python code for the 0-1 knapsack problem using dynamic programming:

Overall Approach:

The code utilizes dynamic programming to efficiently solve the 0-1 knapsack problem. It constructs a 2D table K to store the maximum profit achievable for each possible knapsack capacity and each item included or excluded.

Function knapSack():

Initialization: Initializes a 2D array K of size n+1 x BagLimit+1, where n is the number of items and BagLimit is the knapsack capacity.

Building the Table: Fills the K table in a bottom-up manner, starting from the smallest subproblems and gradually building towards the larger ones.

a. Base Cases: Fills the first row and first column with zeros, representing zero profit for either empty knapsack or no items.

b. Recursive Formula: For each item i and knapsack capacity w, considers two cases:

i. **Including Item `i`:** If the weight of item `i` is less than or equal to the remaining capacity `w`, compares the profit gained by including item `i` (profit of item `i` plus the maximum profit for the remaining weight `w-wt[i-1]`) to the maximum profit for the current capacity without item `i` (stored in `K[i-1][w]`). The larger of these two values is assigned to `K[i][w]`.

ii. **Excluding Item `i`:** If the weight of item `i` exceeds the remaining capacity `w`, simply copies the maximum profit for the current capacity without item `i` (`K[i-1][w]`) to `K[i][w]`, indicating that excluding item `i` is the optimal choice.
Returning Maximum Profit: Returns the value stored in K[n][BagLimit], representing the maximum profit achievable for the knapsack with all items considered.

Example Usage:

The code provides an example of using the knapSack() function to calculate the maximum profit for a given knapsack capacity and a set of items.

Time and Space Complexity Analysis:

Time Complexity: O(N * W) due to the iterative process of filling the K table.

Space Complexity: O(N * W) as the K table stores the maximum profit for each possible knapsack capacity and each item included or excluded.