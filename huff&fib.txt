# Problem statement --> Use the first eight numbers of fibonacci series as frequency of characters for the first 8 alphabets in english from 'a' to 'h' 
# and generate a huffman tree and print the prefix codes generated for each character
n = 8
num1 = 0
num2 = 1
next_number = 0 
count = 1
freq = []

while count <= n:
	freq.append(next_number)
	count += 1
	num1 = num2
	num2 = next_number
	next_number = num1 + num2
	
print(freq)

# A Huffman Tree Node 
import heapq 


class node: 
	def __init__(self, freq, symbol, left=None, right=None): 
		# frequency of symbol 
		self.freq = freq 

		# symbol name (character) 
		self.symbol = symbol 

		# node left of current node 
		self.left = left 

		# node right of current node 
		self.right = right 

		# tree direction (0/1) 
		self.huff = '' 

	def __lt__(self, nxt): 
		return self.freq < nxt.freq 


# utility function to print huffman 
# codes for all symbols in the newly 
# created Huffman tree 
def printNodes(node, val=''): 

	# huffman code for current node 
	newVal = val + str(node.huff) 

	# if node is not an edge node 
	# then traverse inside it 
	if(node.left): 
		printNodes(node.left, newVal) 
	if(node.right): 
		printNodes(node.right, newVal) 

		# if node is edge node then 
		# display its huffman code 
	if(not node.left and not node.right): 
		print(f"{node.symbol} -> {newVal}") 



chars = ['a', 'b', 'c', 'd', 'e', 'f', 'h'] 

nodes = [] 

for x in range(len(chars)): 
	heapq.heappush(nodes, node(freq[x], chars[x])) 

while len(nodes) > 1: 

	left = heapq.heappop(nodes) 
	right = heapq.heappop(nodes) 
	
	left.huff = 0
	right.huff = 1
	
	newNode = node(left.freq+right.freq, left.symbol+right.symbol, left, right) 

	heapq.heappush(nodes, newNode) 

 
printNodes(nodes[0]) 


